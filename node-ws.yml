apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    name: web-server
  name: web-server-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: web-server
    spec:
      containers:
        - name: node
          image: __IMAGETAG_WS__
          ports: 
            - containerPort: 8080
              name: www
          env:
            - name: SERVER_ID  #export the pod ID as SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources:
            requests:
              memory: "64Mi"
              cpu: "80m"
            limits:
              memory: "256Mi"
              cpu: "250m"
          readinessProbe: # time to come alive (only at startup)
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe: # check if app is alive (during executino)
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
        - name: nginx
          image: nginx:1.13
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: ["/usr/sbin/nginx","-s","quit"]
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/
          resources:
            limits:
              cpu: 150m
            requests:
              cpu: 50m
          env:
            # This is a workaround to easily force a restart by incrementing the value (numbers must be quoted)
            # NGINX needs to be restarted for configuration changes, especially DNS changes, to be detected
            - name: RESTART_
              value: "1"
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
            items:
              - key: nginx.conf
                path: nginx.conf
      imagePullSecrets:
        - name: __IMAGESECRET_WS__
---
apiVersion: v1 
kind: Service
metadata:
  labels:
    name: node-nginx
  name: node-nginx
spec: 
  ports:
  - name: http
    port: 80
  selector:
    name: node-nginx
  type: LoadBalancer
---
apiVersion: v1
data:
  nginx.conf: |
    worker_processes auto;
    error_log /dev/stdout info;

    events {
      worker_connections 1024;
    }

    http {
      upstream node {
        server localhost:8080;
      }

      server {
        listen 80 default_server;
        server_name _;

        location / {
          proxy_pass http://web-server-service;
        }

        location ~ /healthz {
          return 200 "OK";
          add_header Content-Type text/plain;
        }
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: nginx-conf
  namespace: default
  selfLink: /api/v1/namespaces/default/configmaps/nginx-conf
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: web-server
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: web-server-deployment
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
