variables:
  CONTAINER_IMAGE_WEBSERVER: ${CI_REGISTRY}/${CI_PROJECT_PATH}/webserver:${CI_BUILD_REF_NAME}_${CI_BUILD_REF} 
  CONTAINER_IMAGE_WEBSERVER_LATEST: ${CI_REGISTRY}/${CI_PROJECT_PATH}/webserver:latest
  CONTAINER_IMAGE_REVERSE_PROXY: ${CI_REGISTRY}/${CI_PROJECT_PATH}/reverseproxy:${CI_BUILD_REF_NAME}_${CI_BUILD_REF} 
  CONTAINER_IMAGE_REVERSE_PROXY_LATEST: ${CI_REGISTRY}/${CI_PROJECT_PATH}/reverseproxy:latest
  KUBE_NAMESPACE: "default"

services:
  - docker:dind #Start the docker daemon

stages: #declare the stages to task
  - testing
  - build_webserver_image
  - build_reverserproxy_image
  - deploy_to_gcloud

.test:
  stage: testing
  image: node:boron
  script:
    - npm install
    - npm test

build_webserver:
  stage: build_webserver_image   # build image only after test passed
  image: docker:git # use simply git docker image
  services:
    - docker:dind
  script:
    - LOWERCASE_CONTAINER_IMAGE_WEBSERVER=$(echo "${CONTAINER_IMAGE_WEBSERVER}" | tr '[:upper:]' '[:lower:]')
    - LOWERCASE_CONTAINER_IMAGE_WEBSERVER_LATEST=$(echo "${CONTAINER_IMAGE_WEBSERVER_LATEST}" | tr '[:upper:]' '[:lower:]')
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker build -t ${LOWERCASE_CONTAINER_IMAGE_WEBSERVER} -f /WebServerDockerfile
    - docker tag ${LOWERCASE_CONTAINER_IMAGE_WEBSERVER} ${LOWERCASE_CONTAINER_IMAGE_WEBSERVER_LATEST}
    - docker push ${LOWERCASE_CONTAINER_IMAGE_WEBSERVER}
    - docker push ${LOWERCASE_CONTAINER_IMAGE_WEBSERVER_LATEST}

.build_reverse_proxy:
  stage: build_reverserproxy_image   # build image only after test passed
  image: docker:git # use simply git docker image
  services:
    - docker:dind
  script:
    - LOWERCASE_CONTAINER_IMAGE_REVERSE_PROXY=$(echo "${CONTAINER_IMAGE_REVERSE_PROXY}" | tr '[:upper:]' '[:lower:]')
    - LOWERCASE_CONTAINER_IMAGE_REVERSE_PROXY_LATEST=$(echo "${CONTAINER_IMAGE_REVERSE_PROXY_LATEST}" | tr '[:upper:]' '[:lower:]')
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker build -t ${LOWERCASE_CONTAINER_IMAGE_REVERSE_PROXY} - < ReverseProxyDockerfile
    - docker tag ${LOWERCASE_CONTAINER_IMAGE_REVERSE_PROXY} ${LOWERCASE_CONTAINER_IMAGE_REVERSE_PROXY_LATEST}
    - docker push ${LOWERCASE_CONTAINER_IMAGE_REVERSE_PROXY}
    - docker push ${LOWERCASE_CONTAINER_IMAGE_REVERSE_PROXY_LATEST}

.deploy:
  stage: deploy_to_gcloud
  only: [master]  #build and push images only for master branch commits
  image: google/cloud-sdk:latest
  script:
    - LOWERCASE_CONTAINER_IMAGE_WEBSERVER=$(echo "${CONTAINER_IMAGE_WEBSERVER}" | tr '[:upper:]' '[:lower:]')
    - echo "${KUBE_CERTIFICATE}" > kube_ca.pem
    - kubectl config set-cluster default-cluster --server=${KUBE_URL} --certificate-authority="$(pwd)/kube_ca.pem"
    - kubectl config set-credentials default-admin --token=${KUBE_TOKEN}
    - kubectl config set-context default-system --cluster=default-cluster --user=default-admin --namespace ${KUBE_NAMESPACE}
    - kubectl config use-context default-system
    - kubectl cluster-info
    - kubectl create secret docker-registry ${CI_BUILD_REF} --docker-server=https://registry.gitlab.com/v1/ --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --docker-email=$GITLAB_USER_EMAIL
    - echo "${LOWERCASE_CONTAINER_IMAGE_WEBSERVER}"
    - sed -i "s#__IMAGETAG__#${LOWERCASE_CONTAINER_IMAGE_WEBSERVER}#g" node-ws.yml 
    - sed -i "s#__IMAGESECRET__#${CI_BUILD_REF}#g" node-ws.yml 
    - kubectl apply -f ./node-ws.yml
    - kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/web-server-deployment"
    - kubectl delete secret ${CI_BUILD_REF}
  variables:
