variables:
  CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}_${CI_BUILD_REF} 
  CONTAINER_IMAGE_LATEST: ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest

services:
  - docker:dind #Start the docker daemon

stages: #declare the stages to task
  - build-docker-image
  - deploy_to_gcloud
  
.build-docker: #builds the docker image for the release
  stage: build-docker-image
  image: docker:latest
  
  script:
    - cd ./hellonode
    - echo "CONTAINER_IMAGE:" $(echo "${CONTAINER_IMAGE}" | tr '[:upper:]' '[:lower:]')
    - LOWERCASE_CONTAINER_IMAGE=$(echo "${CONTAINER_IMAGE}" | tr '[:upper:]' '[:lower:]')
    - LOWERCASE_CONTAINER_IMAGE_LATEST=$(echo "${CONTAINER_IMAGE_LATEST}" | tr '[:upper:]' '[:lower:]')
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker build -t ${LOWERCASE_CONTAINER_IMAGE} .
    - docker tag ${LOWERCASE_CONTAINER_IMAGE} ${LOWERCASE_CONTAINER_IMAGE_LATEST}
    - docker push ${LOWERCASE_CONTAINER_IMAGE}
    - docker push ${LOWERCASE_CONTAINER_IMAGE_LATEST}
    
deploy:
  stage: deploy_to_gcloud
  image: google/cloud-sdk:latest
  script:
    - printenv
    - echo "KUBE_URL: ${KUBE_URL}"
    - echo "KUBE_TOKEN: ${KUBE_TOKEN}"
    - echo "KUBE_NAMESPACE: ${KUBE_NAMESPACE}"
    - echo "${KUBE_CONFIG}"
    - echo "${KUBE_CONFIG}" > config
    - echo "${SERVICE_ACCOUNT_CREDENTIALS}" > credentials
    - export KUBECONFIG=./config
    - gcloud auth activate-service-account --key-file "credentials"
    - gcloud config set project agiit1718-42 
    - gcloud container clusters get-credentials social-ant-network-cluster --zone=us-central1-a
    - kubectl config view
    - kubectl config set current-context gke_agiit1718-42_us-central1-a_social-ant-network-cluster
    - kubectl delete deployment hello-web #Remove the pod if it exists
    - kubectl run hello-web --image=registry.gitlab.com/moraispgsi/agiit-thematic-study:latest #Creating a pod and deploying the image
    - kubectl expose deployment hello-web --type=LoadBalancer --port 80 --target-port 8080 #Exposing the app on port 80
    - kubectl get pods
